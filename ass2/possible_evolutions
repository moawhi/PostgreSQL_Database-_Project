#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: <YOUR NAME HERE> <YOUR STUDENT ID HERE>
Written on: <DATE HERE>

Possible Evolutions

Given the name of a pokemon,
display a list of all the pokemon that could evolve into the given pokemon,
and a list of all the pokemon that the given pokemon could evolve into.
"""


import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Pokemon Name>"


### Globals
db = None
Pokemon_Name = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Pokemon_Name = helpers.clean(sys.argv[1])


def main():
    # PRE EVO
    curr.callproc('Pokemon_ID_func', [Pokemon_Name])
    tup_list = curr.fetchall()
   
    if (len(tup_list) != 0):
        pokemonID = tup_list[0]
        curr.callproc('Pokemon_pre', [pokemonID])
        tup_list = curr.fetchall()
        if (len(tup_list) == 0):
            print("'%s' doesn't have any pre-evolutions." % Pokemon_Name)
            
        else:
            print("'%s' can evolve from:" % Pokemon_Name)

            items = []

            for row in tup_list:
                items.append(row[0])
            
            evolution_count = len(set(items)) + 1


            for i in range (0,len(tup_list)):
                evolutionId = tup_list[i][0]
                if i == 0:
                    print("\t '%s' when the following requirements are satisfied:" % tup_list[i][1])
                if (tup_list[i][3] == True) :
                    print("\t"*(evolution_count+1) + "NOT " + tup_list[i][2])
                else:
                    print("\t"*(evolution_count+1) + tup_list[i][2])

                if i != (len(tup_list) - 1) :
                    if (evolutionId != tup_list[i+1][0]):
                        print("\t" * (evolution_count-1) + "OR")
                    else :
                        print("\t" * (evolution_count) + "AND")


        # POST EVO
        curr.callproc('Pokemon_post', [pokemonID])
        tup_list = curr.fetchall()
        
        if (len(tup_list) != 0):
            print("'%s' can evolve into:" % Pokemon_Name)

            evolution_count = 2
            last_evolution = tup_list[0]

            for i in range (0,len(tup_list)):
                evolutionId = tup_list[i][0]

                # same evo name but different id
                if ((i == 0) | (tup_list[i][1] != last_evolution[1])):
                    print("\t '%s' when the following requirements are satisfied:" % tup_list[i][1])
                
                # tab sise
                if i != (len(tup_list) - 1) :              
                    if ((i == 0) | (evolutionId != tup_list[i+1][0]) | (tup_list[i][1] != last_evolution[1]) 
                        & (tup_list[i][1] != tup_list[i+1][1])): 
                        evolution_count = 2
                    elif ((evolutionId != tup_list[i+1][0]) & (tup_list[i][1] == tup_list[i+1][1])): 
                        evolution_count = 1

                # check for inverted requirement
                if (tup_list[i][3] == True) :
                    print("\t"*(evolution_count+1) + "NOT " + tup_list[i][2])
                else:
                    print("\t"*(evolution_count+1) + tup_list[i][2])

                if i != (len(tup_list) - 1) :
                    # same evo name but different id
                    if (evolutionId != tup_list[i+1][0]):
                        if (tup_list[i][1] == tup_list[i+1][1]):
                            print("\t" * (evolution_count) + "OR")
                    # same evo same name
                    else :
                        print("\t" * (evolution_count) + "AND")
                last_evolution = tup_list[i]
        else:
            print("'%s' doesn't have any post-evolutions." % Pokemon_Name)
    else:       
        print("'%s' isn't a Pokemon that exists." % Pokemon_Name, file=sys.stderr)

    
    


if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        curr = db.cursor()
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
