#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: <YOUR NAME HERE> <YOUR STUDENT ID HERE>
Written on: <DATE HERE>

My Pokemon

Create your very own Pokemon
"""


import sys
import psycopg2
import helpers
from random import Random
from collections import namedtuple


### Constants
USAGE = f"Usage: {sys.argv[0]} <Seed>"


### Globals
db = None
Seed = None
rng = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
Seed = int(sys.argv[1]) # read the seed from the command line
rng  = Random(Seed)     # set the seed for the python random number generator

# `rng` is a python Random number generator
# `rng.random()` returns a random float between 0 and 1
# `rng.randint(a, b)` returns a random integer between a and b (inclusive)

# `SELECT setseed(seed);` sets the postgres random seed to `seed`
# `SELECT * FROM Table ORDER BY random() LIMIT 5;` gives 5 random rows from the table `Table`
# `SELECT setseed(seed);` should be used once, before any calls to random(), with the a random number generated by `rng.random()`

query = '''
SELECT setseed(%s);
'''



def menu(items: list[str]) -> int:
    """
    Given a list of strings,
    print a numbered menu
    and return the user's selection.
    """
    padding = len(str(len(items)))
    print(f"Select an option from the menu below by entering its number:")
    for i, item in enumerate(items):
        print(f"{i+1:{padding}}) {item}")
    ret = int(input("> Selection: ")) - 1
    if not sys.stdin.isatty():
        print(f"{ret+1}")
    print()
    return ret



def main():
    # TODO: YOUR CODE HERE
    curr.execute(query, [rng.random()])
    curr.execute("SELECT * FROM Game_Info")
    
    # Select Game
    tup_list = curr.fetchall()
    items = []
    for row in tup_list:
        items.append(row[0])
    Seed = menu(items)
    gameName = items[Seed]

    # Select Pokemon
    curr.callproc('Pokemon_Game_Info', [gameName])
    tup_list = curr.fetchall()
    items = []
    for row in tup_list:
        items.append(row[0])

    Seed = menu(items)
    pokemonName = items[Seed]
    pokemonSpecies = tup_list[Seed][1]
    curr.callproc('Types_Info', [tup_list[Seed][2]])
    firstType = curr.fetchall()
    curr.callproc('Types_Info', [tup_list[Seed][3]])

    secondType = curr.fetchall()

    if (firstType == []) :
        pokemonType = secondType[0][0]
    elif (secondType == []) :
        pokemonType = firstType[0][0]
    else :  
        pokemonType = firstType[0][0] + ' + ' + secondType[0][0]
    
    pokemonId = tup_list[Seed][4]
    pokemonRegionId = tup_list[Seed][5]
    pokemonVariationId = tup_list[Seed][6]

    PID = namedtuple('PID',['pokedex','variation'])
    pokemonNationalId = PID(pokemonId, pokemonVariationId)
    # print(pokemonNationalId)


    # Select Abilities
    curr.callproc('Pokemon_Abilities_Info', [pokemonNationalId])
    tup_list = curr.fetchall()
    if len(tup_list) == 0:
        abilityName = "None"
    else :
        items = []
        for row in tup_list:
            items.append(row[0])
        Seed = menu(items)
        # print(tup_list)
        abilityName = tup_list[Seed][0]


    # Select Moves
    curr.callproc('Pokemon_Moves_Info', [pokemonName, gameName])
    tup_list = curr.fetchall()
    items = []

    for row in tup_list:
        items.append(row[0])
    movesData = []


    if (len(tup_list) < 4) : j = len(tup_list)
    else: j = 4 
    for i in range(0,j) :
        Seed = menu(items)
        movesData.append(tup_list[Seed])
        tup_list.remove(tup_list[Seed])
        items.remove(items[Seed])


    print("Here is your new Pokemon (from Pokemon " + gameName +"):\n")
    print("Name: " + pokemonName)
    print("Species: " + pokemonSpecies)
    print("Type: " + pokemonType)
    print("Pokedex Number: %s (%s)\n" % (pokemonRegionId, pokemonId))
    print("Ability: " + abilityName + "\n")
    print("Moves:")
    for move in movesData:
        print("         "+"{} [{}] (Category: {}, Power: {}, Accuracy: {})".format(*move))




if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        curr = db.cursor()
        
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
